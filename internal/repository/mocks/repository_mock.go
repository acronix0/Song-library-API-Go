// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/acronix0/song-libary-api/internal/dto"
	repository "github.com/acronix0/song-libary-api/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockSong is a mock of Song interface.
type MockSong struct {
	ctrl     *gomock.Controller
	recorder *MockSongMockRecorder
}

// MockSongMockRecorder is the mock recorder for MockSong.
type MockSongMockRecorder struct {
	mock *MockSong
}

// NewMockSong creates a new mock instance.
func NewMockSong(ctrl *gomock.Controller) *MockSong {
	mock := &MockSong{ctrl: ctrl}
	mock.recorder = &MockSongMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSong) EXPECT() *MockSongMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSong) Create(ctx context.Context, song dto.CreateSongDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, song)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSongMockRecorder) Create(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSong)(nil).Create), ctx, song)
}

// Delete mocks base method.
func (m *MockSong) Delete(ctx context.Context, songID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, songID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSongMockRecorder) Delete(ctx, songID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSong)(nil).Delete), ctx, songID)
}

// Get mocks base method.
func (m *MockSong) Get(ctx context.Context, skip, take int) ([]dto.ResponseSongDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, skip, take)
	ret0, _ := ret[0].([]dto.ResponseSongDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSongMockRecorder) Get(ctx, skip, take interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSong)(nil).Get), ctx, skip, take)
}

// Update mocks base method.
func (m *MockSong) Update(ctx context.Context, song dto.UpdateSongDTO) (dto.ResponseSongDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, song)
	ret0, _ := ret[0].(dto.ResponseSongDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSongMockRecorder) Update(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSong)(nil).Update), ctx, song)
}

// MockLyrics is a mock of Lyrics interface.
type MockLyrics struct {
	ctrl     *gomock.Controller
	recorder *MockLyricsMockRecorder
}

// MockLyricsMockRecorder is the mock recorder for MockLyrics.
type MockLyricsMockRecorder struct {
	mock *MockLyrics
}

// NewMockLyrics creates a new mock instance.
func NewMockLyrics(ctrl *gomock.Controller) *MockLyrics {
	mock := &MockLyrics{ctrl: ctrl}
	mock.recorder = &MockLyricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLyrics) EXPECT() *MockLyricsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLyrics) Create(ctx context.Context, songId int, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, songId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLyricsMockRecorder) Create(ctx, songId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLyrics)(nil).Create), ctx, songId, text)
}

// Delete mocks base method.
func (m *MockLyrics) Delete(ctx context.Context, songID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, songID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLyricsMockRecorder) Delete(ctx, songID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLyrics)(nil).Delete), ctx, songID)
}

// Get mocks base method.
func (m *MockLyrics) Get(ctx context.Context, songId, skip, take int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, songId, skip, take)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLyricsMockRecorder) Get(ctx, songId, skip, take interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLyrics)(nil).Get), ctx, songId, skip, take)
}

// Update mocks base method.
func (m *MockLyrics) Update(ctx context.Context, songId int, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, songId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLyricsMockRecorder) Update(ctx, songId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLyrics)(nil).Update), ctx, songId, text)
}

// MockRepositoryManager is a mock of RepositoryManager interface.
type MockRepositoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryManagerMockRecorder
}

// MockRepositoryManagerMockRecorder is the mock recorder for MockRepositoryManager.
type MockRepositoryManagerMockRecorder struct {
	mock *MockRepositoryManager
}

// NewMockRepositoryManager creates a new mock instance.
func NewMockRepositoryManager(ctrl *gomock.Controller) *MockRepositoryManager {
	mock := &MockRepositoryManager{ctrl: ctrl}
	mock.recorder = &MockRepositoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryManager) EXPECT() *MockRepositoryManagerMockRecorder {
	return m.recorder
}

// Lyrics mocks base method.
func (m *MockRepositoryManager) Lyrics() repository.Lyrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lyrics")
	ret0, _ := ret[0].(repository.Lyrics)
	return ret0
}

// Lyrics indicates an expected call of Lyrics.
func (mr *MockRepositoryManagerMockRecorder) Lyrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lyrics", reflect.TypeOf((*MockRepositoryManager)(nil).Lyrics))
}

// Song mocks base method.
func (m *MockRepositoryManager) Song() repository.Song {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Song")
	ret0, _ := ret[0].(repository.Song)
	return ret0
}

// Song indicates an expected call of Song.
func (mr *MockRepositoryManagerMockRecorder) Song() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Song", reflect.TypeOf((*MockRepositoryManager)(nil).Song))
}
