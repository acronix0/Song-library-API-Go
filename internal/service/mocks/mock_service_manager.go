// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/acronix0/song-libary-api/internal/dto"
	service "github.com/acronix0/song-libary-api/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// Library mocks base method.
func (m *MockServiceManager) Library() service.Library {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Library")
	ret0, _ := ret[0].(service.Library)
	return ret0
}

// Library indicates an expected call of Library.
func (mr *MockServiceManagerMockRecorder) Library() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Library", reflect.TypeOf((*MockServiceManager)(nil).Library))
}

// MockLibrary is a mock of Library interface.
type MockLibrary struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryMockRecorder
}

// MockLibraryMockRecorder is the mock recorder for MockLibrary.
type MockLibraryMockRecorder struct {
	mock *MockLibrary
}

// NewMockLibrary creates a new mock instance.
func NewMockLibrary(ctrl *gomock.Controller) *MockLibrary {
	mock := &MockLibrary{ctrl: ctrl}
	mock.recorder = &MockLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibrary) EXPECT() *MockLibraryMockRecorder {
	return m.recorder
}

// CreateSong mocks base method.
func (m *MockLibrary) CreateSong(ctx context.Context, song dto.CreateSongDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSong", ctx, song)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSong indicates an expected call of CreateSong.
func (mr *MockLibraryMockRecorder) CreateSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSong", reflect.TypeOf((*MockLibrary)(nil).CreateSong), ctx, song)
}

// Delete mocks base method.
func (m *MockLibrary) Delete(ctx context.Context, songID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, songID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLibraryMockRecorder) Delete(ctx, songID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLibrary)(nil).Delete), ctx, songID)
}

// GetSongText mocks base method.
func (m *MockLibrary) GetSongText(ctx context.Context, songId, skip, take int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongText", ctx, songId, skip, take)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongText indicates an expected call of GetSongText.
func (mr *MockLibraryMockRecorder) GetSongText(ctx, songId, skip, take interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongText", reflect.TypeOf((*MockLibrary)(nil).GetSongText), ctx, songId, skip, take)
}

// GetSongs mocks base method.
func (m *MockLibrary) GetSongs(ctx context.Context, skip, take int) ([]dto.ResponseSongDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongs", ctx, skip, take)
	ret0, _ := ret[0].([]dto.ResponseSongDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongs indicates an expected call of GetSongs.
func (mr *MockLibraryMockRecorder) GetSongs(ctx, skip, take interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongs", reflect.TypeOf((*MockLibrary)(nil).GetSongs), ctx, skip, take)
}

// Update mocks base method.
func (m *MockLibrary) Update(ctx context.Context, song dto.UpdateSongDTO) (dto.ResponseSongDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, song)
	ret0, _ := ret[0].(dto.ResponseSongDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLibraryMockRecorder) Update(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLibrary)(nil).Update), ctx, song)
}
